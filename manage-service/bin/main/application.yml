# 내부
server:
  port: 8002

<<<<<<< HEAD

spring:
  application:
    name: manage-service
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://192.168.1.51:3306/dream?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=Asia/Seoul
    username: dream
    password: 1234
  security:
    oauth2:
      resourceserver:
        jwt:
          jwk-set-uri: http://192.168.1.54:8080/auth/realms/MSA/protocol/openid-connect/certs
      
keycloak:
  realm: MSA
  bearer-only: true
  ssl-required: external
  resource: spring-gateway-client
  auth-server-url: http://192.168.1.54:8080/auth
  credentials:
    secret: WEcACPUTWPfuhPrEz3bBaHcl7OLLmYX1
=======
--- 

spring:
  application:
   name: manage-service  # git에 있는 확장자 제외한 이름.
  config:
   import: optional:configserver:http://localhost:8888  # config 서버 위치
   
---
>>>>>>> ec6a23e06640487a52c2dfa0c7a6dce6f633945e

# actuator를 이용하여 서버 재시작 없이 변경내용 반영 가능하게 함.
management:
  endpoints:
   web:
    exposure:
     include: refresh 
 
    
#외부
#  # db 설정  
#  datasource:
#    driver-class-name: com.mysql.cj.jdbc.Driver
#    url: jdbc:mysql://192.168.1.51:3306/dream?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=Asia/Seoul
#    username: dream
#    password: 1234

<<<<<<< HEAD
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://localhost:8761/eureka
         
=======
## mybatis 연동 설정
#mybatis:
#  mapper-locations: /mapper/**/*.xml
#
## 유레카 클라이언트 설정
#eureka:
#  instance:
#    instance-id: manage-microservice-instance # eureka에 등록되는 id 값
#  client:
#    register-with-eureka: true  # 유레카에 등록할지 여부.
#    fetch-registry: true  # 유레카에서 조회할지 여부
#    service-url:
#      defaultZone: http://localhost:8761/eureka   # 서비스를 등록할 서버 주소를 지정
>>>>>>> ec6a23e06640487a52c2dfa0c7a6dce6f633945e
